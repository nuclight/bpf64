#include <bpf64std.bah>
#include "nuc_ts_incr.bah"

/* C preprocessor is used */

#define TCPOPT_TS_KIND 8  /* Timestamp option has Kind=8 */ 
#define TCPOPT_TS_LEN 10  /* and length 10, per RFC 1323 */

#define LOG cop bpf64_printf

/* helper macros to make printing less tedious */
#define LOG1(fmt, arg1)	printarg = arg1; LOG(fmt, printarg);
#define LOG2(fmt, arg1, arg2)		\
	printarg1 = arg1;		\
	printarg2 = arg2;		\
	LOG(fmt, printarg1, printarg2);

/* '#pragma' is 'use' */
/* use proginfo_literal("tcp_timestamp_incr") TODO */
use auto_str_literal(0, forlog); /* combine all C strings in literal at start */
/* TODO stmt in main creating segment from it */

goto main;	/* functions and top-level labels in same namespace */

/* update counters about our work, return 1 on success and 0 on fail */
func rec2stat(errorno)	/* one input register, R0 */
my value;		/* and one local register, R1 */
{
	A = 1;
	if errorno > STAT_MAX	/* it may be 'goto', but direct 'jt' and */
		jt fail jf ok;	/* 'jf' for short jumps are also allowed */
fail:
	A = 0;
	errorno = STAT_PROGER_ERROR;
ok:
	X = errorno;		/* offset can be only in index registers */
	value = DS:P[X:8];	/* get current counter value to local register */
	R1 += 1;		/* it's just alias, actual register will work */
	DS:P[X:dw] = value;	/* shared memory in DS segment */
	return A;
}

/*** Comments about higher-level logic with 3 '*'s */

/* parameters:
 * network header start offset - in, l4 header offset - out,
 * returns L4 protocol
 */
func parse_ipv4(nh_pos, l4_off)
my iphofs, data_end;
out error printarg1;	/* no comma - aliases to same register */
{
	LOG1("parse_ipv4: nh_pos=%d\n", nh_pos);

	data_end = P.len; /* load length of packet */
	/* 
	 * Instead of dereferencing X manually as in rec2stat(), we can
	 * put syntax construction backed by local variable (register),
	 * which will assign X for us on every use, so init just once.
	 */
	X = nh_pos;
	index iph use X sequence ip4hdr in iphofs;

	/*** Error-checking packet: length of fixed header */
	B = nh_pos;	/* save some stack by global register */
	B += sizeof ip4hdr; /* note it doesn't know about alignment */
	if B > data_end {
		LOG1("parse_ipv4: iphdr+20 past end=%d of pkt\n", data_end);
		/* Call may be done via prepared arguments (registers) */
		error = STAT_IPHDRSHORT;
		call rec2stat(); /* 'call' and args are optional */
		return 0;
	}

	/*** Error-checking packet: total length field */
	B = P[iph.tot_len];	/* tracked index here will do */
				/* X = iphofs; */
				/* B = P[X+2:2] */
	C = B;		/* leave B for printf */
	C += nh_pos;
	if C > data_end {
		LOG1("parse_ipv4: tot_len=%d\n", B);
		/* Note function call with args will generate assignments */
		/* to output registers, so you may simply write: */
		rec2stat(STAT_IPTOTSHORT);
		return 0;
	}

	/*** Error-checking packet: IHL field */
	B = iph.ihl; /* for fixed field inside struct P[] is unnecessary */
	if B < 5 {
		LOG1("parse_ipv4: ihl=%d\n", B);
		rec2stat(STAT_IPHDRSHORT);
		return 0;
	}

	B -= 5; B *= 4; B += 20;/* l4_off = 20 + 4*(iph->ihl - 5); */
	l4_off = B;
	LOG1("parse_ipv4: l4_off:=%d\n", l4_off);

	/*** Error-checking packet: IHL field & real length */
	B += nh_pos; /* if (*nh_pos + *l4_off > data_end) */
	if B > data_end {
		rec2stat(STAT_IPHDRSHORT);
		return 0;
	}
	
	/* return values are: Accumulator and l4_off in stack */
	A = iph.protocol;
	return A; 

}

/* parameters:
 * network header start offset - in, l4 header offset from L3 - out,
 * returns L4 protocol
 */
func parse_ipv6(nh_pos, l4_off)
my iphofs, data_end, next_hdr_type,
   l4_abs;	/* absolute l4_off - from start of packet */
out error printarg1, printarg2;
{
	data_end = P.len; /* load length of packet */

	X = nh_pos;
	index ip6h use X sequence ipv6hdr in iphofs; 

	/*** Error-checking packet: length of fixed header */
	B = nh_pos;	/* save some stack by global register */
	B += sizeof ipv6hdr; /* sizeof is compile-time constant */
	if B > data_end {
		rec2stat(STAT_IPHDRSHORT);
		return 0;
	}

	/*** Error-checking packet: total length field */
	B = ip6h.payload_len;
	if B > data_end {
		rec2stat(STAT_IPTOTSHORT);
		return 0;
	}

	/*** l4_off is from start of L3 header, not entire packet */
	l4_off = sizeof ipv6hdr;
	next_hdr_type = ip6h.nexthdr;

	/*
	 * Note that index:
	 * 1) may be X + constant (or Y + constant), i.e. for just one
	 *    header we could use:
	 *    index hdr use X + sizeof ipv6hdr sequence ipv6_opt_hdr;
	 * 2) may be declared without storage variable.
	 *    In this case it's somewhat like just textual substitution,
	 *    and programmer must control index register manually.
	 */
	index hdr use X sequence ipv6_opt_hdr;

	/* Max 6 iterations, 'asc' is synonym for 'ascending' */
	loop I = 0 asc to 5 {
		/* ALU in BPF64 allows up to 3 registers */
		l4_abs = nh_pos + l4_off;
		X = l4_abs;

		/*** Error-checking packet: is fixed header contained? */
		B = X;
		B += 8; /* not sizeof ipv6_opt_hdr, see RFC 2460 */
		if B > data_end {
			rec2stat(STAT_IP6EXTHDRSHORT);
			return 0;
		}

		/*
		 * Assembler has no switch/case, but it is still possible
		 * to organize code simple than bunch of if's - one of
		 * instructions is jump table, by lower either byte or halfword
		 * of specified register, as index to table of labels.
		 *
		 * In this particular example it is not most effective way:
		 * bpf64awc will create 135 halfword entries (IPPROTO_MH)
		 * mostly filled with offset to default branch. Still,
		 * to demonstrate...
		 */
		jumptable b in next_hdr_type {
			IPPROTO_HOPOPTS => dwords_len,
			IPPROTO_DSTOPTS => dwords_len,
			IPPROTO_ROUTING => dwords_len,
			IPPROTO_MH	=> dwords_len,
			IPPROTO_AH	=> words_len,
			IPPROTO_FRAGMENT=> one_frag,
			default		=> nonext,
		};
	dwords_len:
		B = hdr.hdrlen; B += 1; B *= 8;
		l4_off += B;  /* l4_off += (hdr->hdrlen + 1) * 8 */
		next_hdr_type = hdr.nexthdr;
		goto endswitch;
	words_len:
		B = hdr.hdrlen; B += 2; B *= 4;
		l4_off += B; /* l4_off += (hdr->hdrlen + 2) * 4; */
		next_hdr_type = hdr.nexthdr;
		goto endswitch;
	one_frag:
		l4_off += 8;
		next_hdr_type = hdr.nexthdr;
		goto endswitch;
	endswitch:
		/* End of loop. Note we just return here, but if another
		 * loop to be expected on same loop variable, then
		 * it should be properly terminated here first, or
		 * exception will be thrown on new `loop {}`
		 */
	}
nonext:
	/* Found a header that is not an IPv6 extension header */
	LOG2("parse_ipv6: l4_off:=%d next_hdr_type=%d\n", l4_off, next_hdr_type);
	A = next_hdr_type;
	return A;
}

/* parameters:
 * network header start offset - in, l4 header offset - in
 * returns: -1 format err, 0 untouched, 1 modified */
func process_tcp(nh_pos, l4_off optoff) /* again 2 names for second register */
my data_end, size, optkind, optlen, /* sort registers by use - in case of */
   old_ofs, changed, open;	    /* limited JIT (pesky x86) */
out err printarg1, printarg2;
{
	changed = 0; err = STAT_PROGER_ERROR;
	data_end = P.len; /* load length of packet */

	/*
	 * We know caller won't need nh_pos anymore, and JIT prefers first
	 * registers, so reuse register.
	 */
	nh_pos += l4_off;
	LOG2("process_tcp: nh_pos:=%d l4_off=%d\n", nh_pos, l4_off);

	X = nh_pos;
	index tcph use X sequence tcphdr in nh_pos;

	/*** Error-checking packet: length of fixed header */
	B = nh_pos;	/* save some stack by global register */
	B += sizeof tcphdr;
	if B > data_end {
		LOG("process_tcp: tcph+20 past end of packet\n");
		err = STAT_TCPSHORT;
		goto err_past_end;
	}

	size = tcph.doff; size *= 4;
	LOG1("process_tcp: initial size=%d\n", size);

	/*** Error-checking packet: header length */
	B = nh_pos;	/* save some stack by global register */
	B += size;
	if B > data_end {
		LOG("process_tcp: nh_pos=%p +size=%d\n", nh_pos, B);
		err = STAT_TCPSHORT;
		goto err_past_end;
	}
	if size < 20 {
		err = STAT_TCPINVALID;
		goto err_past_end;
	}

	optoff = nh_pos; /* again reused input register */
	optoff += 20;
	size -= 20;

	if size == 0	/* no options - pass as-is */
		return 0;

	cur = optoff;
	Y = optoff;	/* we have another index register, why not use it? */

	/*** This index will point to start of currently parsed option. */
	index opts use Y in cur;

	alias D sum; 	/* this var lives in global 32-bit register */
	alias E old; /* XXX explicit type for unsigned short? */

	loop I=0 ascending to 39 {
	        if I >= size	/* terminate loop if header shorter than */
			last;	/* maximum allowed options size */
		LOG("while {");

		open = 261;	/* just marker to be in disasm */

		/*
		 * Note we can change index backing store variable - and doing
		 * exactly this here to get offset from loop variable.
		 */
		cur = optoff + I;

		/* Now parsing is easy: */
		optkind = opts[0];
		LOG1("optkind=%d\n", optkind);

		/***
		 * Single-byte options.
		 */
		if optkind == 0	/* End of Options */
			last;
		if optkind == 1	/* NOP */
			next;

		/***
		 * Kind and length bytes options.
		 */

		B = cur; /* Error-checking packet: option length byte is */
		B += 1;  /* past available header space? */
		if B >= size {
			LOG("cur+1 >= size: %d+1 >= %d\n", cur, size);
			err = STAT_TCPOPTOVERFLOW;
			goto err_past_end;
		}

		optlen = opts[1];
		LOG1("optlen=%d\n", optlen);
		if optlen < 2 {
			err = STAT_TCPINVALID;
			goto err_past_end;
		}
		/*
		 * Error-checking packet: option length is larger then actual
		 * packet? Strictly speaking, we don't need this due to
		 * automatical loop termination - this is just to print specific
		 * condition on the same error stat TCPOPTOVERFLOW.
		 */
		B = size; B -= cur;
		if optlen > B
			goto unclosed;

		if optkind == TCPOPT_TS_KIND {
			if changed != 0 goto err_past_end;
			if optlen != TCPOPT_TS_LEN {
				err = STAT_TCPINVALID;
				goto err_past_end;
			}

			/*** increment TSval */
			old_ofs = cur+4; // FIXME word align from tcp start
			LOG1("old_ofs=%d\n", old_ofs);
			old = opts[4:2]; /*** save 2 bytes for checksum */
			C = opts[5:1];   /*** get lowest byte of timestamp */
			C += 1;		 /* we use global register as temp */
			opts[5:1] = C;	 /*** write incremented value back */
			changed = 1;
		}

		open = 0;

		/*** Skip to next option */
		next I += optlen; /* Loop variable allows this! */
	}
	if open > 0
		goto unclosed;

	/*** Update checksum incrementally per RFC 1141 */
	if changed != 0 {
		C = P[old_ofs:2];
		C = ~C;
		sum = old + C;
		F = tcph.cksum;
		sum += F;
		G = sum & 0xffff; H = sum>>16;
		sum = G + H;
		LOG1("changing cksum to htons(%x)\n", sum);
		tcph.cksum = sum; /* XXX again bpf_htons(sum + (sum>>16)) ? */
		
		return 1;
	}

	return 0;

unclosed:
	err = STAT_TCPOPTOVERFLOW;

err_past_end:
	rec2stat(err);
	return -1;

}

func main()
my data_end, rc, h_proto, nh_off, ipproto, done;
out err printarg1, nh_pos, l4_off;
{
	rc = XDP_DROP;

	data_end = P.len;
	LOG1("got packet with length=%d\n", B);

	nh_off = sizeof ethhdr;
	if nh_off > data_end {
		rec2stat(STAT_ETHSHORT);
		return rc;
	}

	/* lazy for index declaration - just take it by offset in `sequence` */
	h_proto = P[eth.h_proto:2];

	/*** check VLAN tag; could be repeated to support double-tagged VLAN */
	if h_proto == ETH_P_8021Q
		goto vlan_parse;
	if h_proto == ETH_P_8021AD
		jt vlan_parse jf l3_parse;
vlan_parse:
	X = nh_off; /* We need it once, so don't use storage var */
	index vhdr use X sequence vlan_hdr;

	nh_off += sizeof vlan_hdr;
	if nh_off > data_end {
		rec2stat(STAT_VLANSHORT);
		return rc;
	}
	h_proto = vhdr.h_vlan_encapsulated_proto;

l3_parse:
	nh_pos = nh_off;
	if h_proto == ETH_P_IP {
		ipproto = parse_ipv4(nh_pos, l4_off);
	}
	else if h_proto == ETH_P_IPV6 {
		/* FIXME what to do with call here? move regwin more? */
		ipproto = parse_ipv6(nh_pos, l4_off);
	}
	else {
		rec2stat(STAT_NONIP);
		return rc;
	}

	if ipproto != IPPROTO_TCP {
		/* pass non-TCP untouched */
		rec2stat(STAT_NONTCP);
		rc = XDP_PASS;
	} else {
		done = process_tcp(nh_pos, l4_off);
		if done == -1 {
			rc = XDP_DROP;
		} else if done == 0 {
			rec2stat(STAT_NONTSTAMP);
			rc = XDP_PASS;
		} else {
			rec2stat(STAT_TS_INCREMENTED);
			rc = XDP_PASS;
		}
	}

	A = rc;
	return A;
}
